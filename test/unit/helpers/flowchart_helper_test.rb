require 'test_helper'

# Checks if the helper functions the same as the partial views

class FlowchartHelperTest < ActionView::TestCase

  include FlowchartHelper

  test 'question renders correctly' do
    # if a question has no answers but is not the last question
    question = {:id=>"releaseType",
                :label=>"What kind of release is this?",
                :type=>"radioset",
                :level=>nil,
                :answers=>nil
    }
    index = 0
    questions = [question, question]
    assert_equal question(question, index, nil, questions),
      "#{question[:id]}[\"#{question[:label]}\"] --> #{questions[index + 1][:id]}[\"#{questions[index + 1][:label]}\"] \n"
  end

  test 'answer renders correctly' do
    # if a question has an answer, but that answer has no dependency and is not on the last question
    question = {:id=>"releaseType",
                :label=>"What kind of release is this?",
                :type=>"radioset",
                :level=>nil,
                :answers=>
                  {"a one-off release of a single dataset"=>{:dependency=>"timeSensitive"},
                  "a one-off release of a set of related datasets"=>
                    {:dependency=>"timeSensitive"},
                  "ongoing release of a series of related datasets"=>
                    {:dependency=>"frequentChanges"},
                  "a service or API for accessing open data"=>{:dependency=>"serviceType"}
                  }
    }
    answer = {:dependency=>nil}
    key = 0
    index = 0
    questions = [question, question]
    assert_equal answer(question, answer, key, index, nil, questions),
      "#{question[:id]}{\"#{question[:label]}\"} --> |\"#{key}\"| #{questions[index + 1][:id]}[\"#{questions[index + 1][:label]}\"] \n"
  end

  test 'dependency renders correctly' do
    # if a question has an answer, that answer has a dependency, that dependency has no answers and is not on the last question
    question = {:id=>"releaseType",
                :label=>"What kind of release is this?",
                :type=>"radioset",
                :level=>nil,
                :answers=>
                  {"a one-off release of a single dataset"=>{:dependency=>"timeSensitive"},
                  "a one-off release of a set of related datasets"=>
                    {:dependency=>"timeSensitive"},
                  "ongoing release of a series of related datasets"=>
                    {:dependency=>"frequentChanges"},
                  "a service or API for accessing open data"=>{:dependency=>"serviceType"}
                  }
    }
    dependency = { :id=>"publisherOrigin",
                       :label=>"Was the data originally created or generated by you?",
                       :type=>"radioset",
                       :level=>nil,
                       :answers=>nil,
                       :prerequisites=>nil
    }
    answer = {:dependency=>"publisherOrigin"}
    key = 0
    index = 0
    dependencies = [dependency]
    questions = [question, question]
    assert_equal dependency(question, answer, key, index, dependencies, questions),
      " #{question[:id]}{\"#{question[:label]}\"}\n#{question[:id]} --> |\"#{key}\"| #{answer[:dependency]}[\"#{dependency[:label]}\"] \n#{answer[:dependency]}[\"#{dependency[:label]}\"] --> #{questions[index + 1][:id]}[\"#{questions[index + 1][:label]}\"] \n"
  end



end
